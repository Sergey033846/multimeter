#pragma once

#include <string>
#include <vector>
#include <atomic>
#include <thread>
#include <random>
#include <stdexcept>
#include <mutex>
#include "channel.h"

/**
 * @class AnalogInput
 * @brief Класс, представляющий аналоговый канал ввода.
 * 
 * Этот класс реализует канал для измерения аналоговых значений с заданным диапазоном
 * и частотой опроса. Он использует многопоточность для регулярного получения
 * измерений с заданной частотой.
 */
class AnalogInput : public Channel {
public:
    /**
     * @brief Конструктор класса AnalogInput.
     * 
     * Конструирует объект аналогового канала с заданным именем. Инициализирует
     * диапазон, частоту, флаг работы канала и измеряемое значение.
     * 
     * @param name Имя канала.
     */
    explicit AnalogInput(const std::string& name);

    /**
     * @brief Деструктор класса AnalogInput.
     * 
     * Останавливает канал и завершает все потоки, связанные с ним.
     */
    ~AnalogInput() override;

    /**
     * @brief Устанавливает новый диапазон для канала.
     * 
     * Устанавливает новый диапазон измерений для аналогового канала. Если диапазон
     * выходит за пределы допустимых значений, будет выброшено исключение.
     * 
     * @param new_range Новый диапазон канала.
     * @throws std::out_of_range Если диапазон некорректен.
     */
    void set_range(int new_range);

    /**
     * @brief Возвращает текущий диапазон канала.
     * 
     * @return Текущий диапазон канала.
     */
    int get_range() const;

    /**
     * @brief Устанавливает частоту измерений канала.
     * 
     * Устанавливает частоту, с которой будут производиться измерения. Если частота
     * некорректна (меньше или равна нулю), выбрасывается исключение.
     * 
     * @param freq Частота измерений.
     * @throws std::invalid_argument Если частота некорректна.
     */
    void set_frequency(int freq);

    /**
     * @brief Возвращает текущую частоту измерений.
     * 
     * @return Частота измерений.
     */
    int get_frequency() const;

    /**
     * @brief Запускает процесс измерений.
     * 
     * Запускает поток, который будет производить регулярные измерения с заданной частотой.
     * Канал переходит в состояние измерений.
     */
    void start() override;

    /**
     * @brief Останавливает процесс измерений.
     * 
     * Останавливает поток измерений и переводит канал в состояние ожидания.
     */
    void stop() override;

    /**
     * @brief Возвращает текущее измеряемое значение.
     * 
     * @return Текущее измеряемое значение.
     */
    float get_measuring_value() const;

private:
    /**
     * @brief Текущий диапазон канала.
     * 
     * Диапазон измерений канала.
     */
    std::atomic<int> range;

    /**
     * @brief Частота опроса канала.
     * 
     * Частота в миллисекундах, с которой будет производиться получение данных.
     */
    std::atomic<int> frequency;

    /**
     * @brief Флаг работы канала.
     * 
     * Указывает, работает ли канал в данный момент.
     */
    std::atomic<bool> running;

    /**
     * @brief Текущее измеряемое значение.
     * 
     * Хранит последнее измеренное значение.
     */
    std::atomic<float> measuring_value;

    /**
     * @brief Мьютекс для синхронизации доступа к данным канала.
     */
    mutable std::mutex mtx;

    /**
     * @brief Поток для выполнения измерений с заданной частотой.
     */
    std::thread channel_thread;

    /**
     * @brief Внутренний метод для работы канала.
     * 
     * Этот метод выполняет циклическое измерение значений с заданной частотой.
     * Измеряемые значения генерируются случайным образом в пределах текущего диапазона.
     */
    void channel_loop();
};
