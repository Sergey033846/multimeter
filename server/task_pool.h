#pragma once

#include <thread>
#include <queue>
#include <mutex>
#include <condition_variable>
#include <functional>
#include <atomic>
#include <memory>

/**
 * @class TaskPool
 * @brief Класс для управления пулом задач с использованием нескольких потоков.
 *
 * Этот класс позволяет выполнять задачи параллельно с использованием пула потоков. 
 * Он управляет очередью задач и синхронизирует доступ к ней с помощью мьютексов и условных переменных.
 */
class TaskPool {
public:
    /**
     * @brief Конструктор, создающий пул потоков.
     * @param num_threads Количество потоков в пуле.
     *
     * При создании пул потоков будет автоматически запущен. Каждый поток будет ожидать задания в очереди.
     */
    TaskPool(size_t num_threads);

    /**
     * @brief Деструктор, останавливающий пул потоков.
     *
     * При уничтожении объекта пул потоков будет остановлен, а все потоки будут завершены.
     */
    ~TaskPool();

    /**
     * @brief Останавливает пул потоков и завершает все рабочие потоки.
     *
     * Устанавливает флаг остановки и уведомляет все потоки, чтобы они завершили выполнение.
     */
    void stop_pool();

    /**
     * @brief Добавляет задачу в очередь для выполнения.
     * @param task Функция, представляющая задачу.
     *
     * Эта функция добавляет задачу в очередь и уведомляет один из рабочих потоков для ее выполнения.
     */
    void enqueue(std::function<void()> task);

private:
    /**
     * @brief Рабочий поток, который выполняет задачи из очереди.
     *
     * Этот метод запускается в каждом потоке. Он извлекает задачи из очереди и выполняет их, пока не получит сигнал
     * о завершении работы пула.
     */
    void worker_thread();

    std::vector<std::thread> workers; ///< Вектор потоков пула
    std::queue<std::function<void()>> tasks; ///< Очередь задач
    std::mutex queue_mutex; ///< Мьютекс для синхронизации доступа к очереди
    std::condition_variable cond_var; ///< Условная переменная для ожидания задач
    std::atomic<bool> stop = false; ///< Флаг для остановки пула
};
